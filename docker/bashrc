# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
# .bashrc
HISTCONTROL=ignoredups:ignorespace

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    # We have color support; assume it's compliant with Ecma-48
    # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
    # a case would tend to support setf rather than setaf.)
    color_prompt=yes
    else
    color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u: \w\a\]$PS1"
    ;;
*)
    ;;
esac

alias gs='git status'
alias gl='git log'
alias gd='git diff'
alias gco='git checkout'
alias vi='vim'

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias rg='grep -rin '

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

unset command_not_found_handle

txtund=""
txtbld=""
blddkg=""
bldred=""
bldblu=""
bldylw=""
bldgrn=""
bldgry=""
bldpnk=""
bldwht=""
txtrst=""

# check if stdout is a terminal...
if test -t 1; then
    if [[ -e /usr/bin/tput ]]; then
        # see if it supports colors...
        ncolors=$(tput colors)

        if test -n "$ncolors" && test $ncolors -ge 8; then

            txtund=$(tput sgr 0 1)          # Underline
            txtbld=$(tput bold)             # Bold
            blddkg=${txtbld}$(tput setaf 0) # Dark Gray
            bldred=${txtbld}$(tput setaf 1) # Red
            bldblu=${txtbld}$(tput setaf 2) # Blue
            bldylw=${txtbld}$(tput setaf 3) # Yellow
            bldgrn=${txtbld}$(tput setaf 4) # Green
            bldgry=${txtbld}$(tput setaf 5) # Gray
            bldpnk=${txtbld}$(tput setaf 6) # Pink
            bldwht=${txtbld}$(tput setaf 7) # White
            txtrst=$(tput sgr0)             # Reset
        fi
    fi
fi
     
dbg() {
    cdate=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${bldwht}$cdate $@ $txtrst"
}
 
inf() {
    cdate=$(date '+%Y-%m-%d %H:%M:%S')
    echo "$cdate $@"
}
 
anmt() {
    cdate=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${bldylw}$cdate $@ $txtrst"
}

amnt() {
    cdate=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${bldylw}$cdate $@ $txtrst"
}

warn() {
    cdate=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${bldylw}$cdate $@ $txtrst"
}
 
ign() {
    cdate=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${blddkg}$cdate $@ $txtrst"
}
 
good() {
    cdate=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${bldgrn}$cdate $@ $txtrst"
}
 
green() {
    cdate=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${bldgrn}$@ $txtrst"
}
 
err() {
    cdate=$(date '+%Y-%m-%d %H:%M:%S')
    echo "${bldred}$cdate $@ $txtrst"
}
 
lg() {
    cdate=$(date '+%Y-%m-%d %H:%M:%S')
    echo "$cdate $@"
} 

boom() {
    echo ""
    if [[ "${2}" != "" ]]; then
        echo "${bldred}StatusCode: ${1}. $txtrst" 
        echo "${bldred}Error: ${2}.$txtrst" 
        exit $1
    else
        echo "${bldred}Error: ${@}.$txtrst" 
        exit 1
    fi
}

xerr() {
    last_status=$?
    if [[ "${last_status}" != "" ]]; then
        if [[ "${last_status}" != "0" ]]; then
            echo ""
            err "Exiting(${last_status}) Error: ${@}"
            exit $last_status
        fi
    fi
}

lgenv() {
    echo ""
    echo "-------------------------------------------"
    env | sort
    echo "-------------------------------------------"
    echo ""
}

alias dev="cd /opt/nerfball"
alias lint="pycodestyle --max-line-length=160 --exclude=venv,build,.tox"
# python setup.py sdist bdist_wheel --universal upload -r pypi

if [[ -e /opt/nerfball/venv/bin/activate ]]; then
    source /opt/nerfball/venv/bin/activate
else
    echo "Missing virtual env: /opt/nerfball/venv/bin/activate"
fi
